{"ast":null,"code":"var _jsxFileName = \"/home/riddle/uchart/KLineChartSample/react-sample/src/chart/CustomThemeKLineChart.jsx\";\nimport React, { PureComponent } from 'react';\nimport { init, dispose } from 'klinecharts';\nimport generatedKLineDataList from '../utils/generatedKLineDataList';\nimport Layout from '../Layout';\nconst textColorDark = '#929AA5';\nconst gridColorDark = '#292929';\nconst axisLineColorDark = '#333333';\nconst crossTextBackgroundColorDark = '#373a40';\nconst textColorLight = '#76808F';\nconst gridColorLight = '#ededed';\nconst axisLineColorLight = '#DDDDDD';\nconst crossTextBackgroundColorLight = '#686d76';\n\nfunction getThemeOptions(theme) {\n  const textColor = theme === 'dark' ? textColorDark : textColorLight;\n  const gridColor = theme === 'dark' ? gridColorDark : gridColorLight;\n  const axisLineColor = theme === 'dark' ? axisLineColorDark : axisLineColorLight;\n  const crossLineColor = theme === 'dark' ? axisLineColorDark : axisLineColorLight;\n  const crossTextBackgroundColor = theme === 'dark' ? crossTextBackgroundColorDark : crossTextBackgroundColorLight;\n  return {\n    grid: {\n      horizontal: {\n        color: gridColor\n      },\n      vertical: {\n        color: gridColor\n      }\n    },\n    candle: {\n      priceMark: {\n        high: {\n          color: textColor\n        },\n        low: {\n          color: textColor\n        }\n      },\n      tooltip: {\n        text: {\n          color: textColor\n        }\n      }\n    },\n    technicalIndicator: {\n      tooltip: {\n        text: {\n          color: textColor\n        }\n      }\n    },\n    xAxis: {\n      axisLine: {\n        color: axisLineColor\n      },\n      tickLine: {\n        color: axisLineColor\n      },\n      tickText: {\n        color: textColor\n      }\n    },\n    yAxis: {\n      axisLine: {\n        color: axisLineColor\n      },\n      tickLine: {\n        color: axisLineColor\n      },\n      tickText: {\n        color: textColor\n      }\n    },\n    separator: {\n      color: axisLineColor\n    },\n    crosshair: {\n      horizontal: {\n        line: {\n          color: crossLineColor\n        },\n        text: {\n          backgroundColor: crossTextBackgroundColor\n        }\n      },\n      vertical: {\n        line: {\n          color: crossLineColor\n        },\n        text: {\n          backgroundColor: crossTextBackgroundColor\n        }\n      }\n    }\n  };\n}\n\nconst themes = [{\n  key: 'dark',\n  text: '深色'\n}, {\n  key: 'light',\n  text: '浅色'\n}];\nexport default class CustomThemeKLineChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      theme: 'light'\n    };\n  }\n\n  componentDidMount() {\n    this.kLineChart = init('custom-style-k-line');\n    this.kLineChart.applyNewData(generatedKLineDataList());\n  }\n\n  componentWillUnmount() {\n    dispose('custom-style-k-line');\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.theme !== this.state.theme) {\n      this.kLineChart.setStyleOptions(getThemeOptions(this.state.theme));\n    }\n  }\n\n  render() {\n    const {\n      theme\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Layout, {\n      title: \"\\u81EA\\u5B9A\\u4E49\\u4E3B\\u9898\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"custom-style-k-line\",\n      style: theme === 'dark' ? {\n        backgroundColor: '#1f2126'\n      } : {},\n      className: \"k-line-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"k-line-chart-menu-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, themes.map(({\n      key,\n      text\n    }) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: key,\n        onClick: _ => {\n          this.setState({\n            theme: key\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, text);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/riddle/uchart/KLineChartSample/react-sample/src/chart/CustomThemeKLineChart.jsx"],"names":["React","PureComponent","init","dispose","generatedKLineDataList","Layout","textColorDark","gridColorDark","axisLineColorDark","crossTextBackgroundColorDark","textColorLight","gridColorLight","axisLineColorLight","crossTextBackgroundColorLight","getThemeOptions","theme","textColor","gridColor","axisLineColor","crossLineColor","crossTextBackgroundColor","grid","horizontal","color","vertical","candle","priceMark","high","low","tooltip","text","technicalIndicator","xAxis","axisLine","tickLine","tickText","yAxis","separator","crosshair","line","backgroundColor","themes","key","CustomThemeKLineChart","state","componentDidMount","kLineChart","applyNewData","componentWillUnmount","componentDidUpdate","prevProps","prevState","snapshot","setStyleOptions","render","map","_","setState"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport { init, dispose } from 'klinecharts'\nimport generatedKLineDataList from '../utils/generatedKLineDataList'\nimport Layout from '../Layout'\n\nconst textColorDark = '#929AA5'\nconst gridColorDark = '#292929'\nconst axisLineColorDark = '#333333'\nconst crossTextBackgroundColorDark = '#373a40'\n\nconst textColorLight = '#76808F'\nconst gridColorLight = '#ededed'\nconst axisLineColorLight = '#DDDDDD'\nconst crossTextBackgroundColorLight = '#686d76'\n\nfunction getThemeOptions (theme) {\n  const textColor = theme === 'dark' ? textColorDark : textColorLight\n  const gridColor = theme === 'dark' ? gridColorDark : gridColorLight\n  const axisLineColor = theme === 'dark' ? axisLineColorDark : axisLineColorLight\n  const crossLineColor = theme === 'dark' ? axisLineColorDark : axisLineColorLight\n  const crossTextBackgroundColor = theme === 'dark' ? crossTextBackgroundColorDark : crossTextBackgroundColorLight\n  return {\n    grid: {\n      horizontal: {\n        color: gridColor\n      },\n      vertical: {\n        color: gridColor\n      }\n    },\n    candle: {\n      priceMark: {\n        high: {\n          color: textColor\n        },\n        low: {\n          color: textColor\n        }\n      },\n      tooltip: {\n        text: {\n          color: textColor\n        }\n      }\n    },\n    technicalIndicator: {\n      tooltip: {\n        text: {\n          color: textColor\n        }\n      }\n    },\n    xAxis: {\n      axisLine: {\n        color: axisLineColor\n      },\n      tickLine: {\n        color: axisLineColor\n      },\n      tickText: {\n        color: textColor\n      }\n    },\n    yAxis: {\n      axisLine: {\n        color: axisLineColor\n      },\n      tickLine: {\n        color: axisLineColor\n      },\n      tickText: {\n        color: textColor\n      }\n    },\n    separator: {\n      color: axisLineColor\n    },\n    crosshair: {\n      horizontal: {\n        line: {\n          color: crossLineColor\n        },\n        text: {\n          backgroundColor: crossTextBackgroundColor\n        }\n      },\n      vertical: {\n        line: {\n          color: crossLineColor\n        },\n        text: {\n          backgroundColor: crossTextBackgroundColor\n        }\n      }\n    }\n  }\n}\n\nconst themes = [\n  { key: 'dark', text: '深色' },\n  { key: 'light', text: '浅色' }\n]\n\nexport default class CustomThemeKLineChart extends PureComponent {\n  state = {\n    theme: 'light'\n  }\n\n  componentDidMount () {\n    this.kLineChart = init('custom-style-k-line')\n    this.kLineChart.applyNewData(generatedKLineDataList())\n  }\n\n  componentWillUnmount () {\n    dispose('custom-style-k-line')\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (prevState.theme !== this.state.theme) {\n      this.kLineChart.setStyleOptions(getThemeOptions(this.state.theme))\n    }\n  }\n\n  render () {\n    const { theme } = this.state\n    return (\n      <Layout\n        title=\"自定义主题\">\n        <div\n          id=\"custom-style-k-line\"\n          style={theme === 'dark' ? { backgroundColor: '#1f2126' } : {}}\n          className=\"k-line-chart\"/>\n        <div\n          className=\"k-line-chart-menu-container\">\n          {\n            themes.map(({ key, text }) => {\n              return (\n                <button\n                  key={key}\n                  onClick={_ => {\n                    this.setState({\n                      theme: key\n                    })\n                  }}>\n                  {text}\n                </button>\n              )\n            })\n          }\n        </div>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDistance = getDistance;\nexports.getTriangleSquare = getTriangleSquare;\nexports.getRotatePoint = getRotatePoint;\nexports.getLinearSlopeIntercept = getLinearSlopeIntercept;\nexports.getLinearYFromPoints = getLinearYFromPoints;\nexports.getLinearYFromSlopeIntercept = getLinearYFromSlopeIntercept;\nexports.checkPointOnStraightLine = checkPointOnStraightLine;\nexports.checkPointOnRayLine = checkPointOnRayLine;\nexports.checkPointOnSegment = checkPointOnSegment;\nexports.checkPointInCircle = checkPointInCircle;\nexports.checkPointOnCircle = checkPointOnCircle;\nexports.checkPointOnArc = checkPointOnArc;\nexports.checkPointInTriangle = checkPointInTriangle;\nexports.checkPointInDiamond = checkPointInDiamond;\nexports.checkPointInRect = checkPointInRect;\nexports.getRayLine = getRayLine;\nexports.getParallelLines = getParallelLines;\nexports.DEVIATION = void 0;\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DEVIATION = 2;\n/**\n * 获取两点之间的距离\n * @param point1\n * @param point2\n * @return {number}\n */\n\nexports.DEVIATION = DEVIATION;\n\nfunction getDistance(point1, point2) {\n  var xDif = point1.x - point2.x;\n  var yDif = point1.y - point2.y;\n  return Math.sqrt(xDif * xDif + yDif * yDif);\n}\n/**\n * 根据三角形三个点获取三角形面积\n * @param point1\n * @param point2\n * @param point3\n * @return {number}\n */\n\n\nfunction getTriangleSquare(point1, point2, point3) {\n  var x1 = Math.abs(point2.x - point1.x);\n  var y1 = Math.abs(point2.y - point1.y);\n  var x2 = Math.abs(point3.x - point1.x);\n  var y2 = Math.abs(point3.y - point1.y);\n  return Math.abs(x1 * y2 - x2 * y1) / 2;\n}\n/**\n * 获取一点绕另一点旋转一定角度后新的点坐标\n * @param point 旋转点\n * @param targetPoint 参照点\n * @param angle 角度\n * @return {{x: *, y: *}}\n */\n\n\nfunction getRotatePoint(point, targetPoint, angle) {\n  var x = (point.x - targetPoint.x) * Math.cos(angle) - (point.y - targetPoint.y) * Math.sin(angle) + targetPoint.x;\n  var y = (point.x - targetPoint.x) * Math.sin(angle) + (point.y - targetPoint.y) * Math.cos(angle) + targetPoint.y;\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * 获取一次函数斜率和截距，即 y = kx + b 中的k值和b值\n * @param point1\n * @param point2\n */\n\n\nfunction getLinearSlopeIntercept(point1, point2) {\n  var difX = point1.x - point2.x;\n\n  if (difX !== 0) {\n    var k = (point1.y - point2.y) / difX;\n    var b = point1.y - k * point1.x;\n    return {\n      k: k,\n      b: b\n    };\n  }\n}\n/**\n * 获取点在两点决定的一次函数上的y值\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction getLinearYFromPoints(point1, point2, targetPoint) {\n  var kb = getLinearSlopeIntercept(point1, point2);\n  return getLinearYFromSlopeIntercept(kb, targetPoint);\n}\n/**\n * 获取点在斜率和截距确定的线上的y值\n * @param kb\n * @param targetPoint\n */\n\n\nfunction getLinearYFromSlopeIntercept(kb, targetPoint) {\n  if (kb) {\n    return targetPoint.x * kb.k + kb.b;\n  }\n\n  return targetPoint.y;\n}\n/**\n * 点是否在线上\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction checkPointOnStraightLine(point1, point2, targetPoint) {\n  if (!targetPoint || !point1 || !point2) {\n    return false;\n  }\n\n  if (point1.x === point2.x) {\n    return Math.abs(targetPoint.x - point1.x) < DEVIATION;\n  }\n\n  var kb = getLinearSlopeIntercept(point1, point2);\n  var y = getLinearYFromSlopeIntercept(kb, targetPoint);\n  var yDif = Math.abs(y - targetPoint.y);\n  return yDif * yDif / (kb.k * kb.k + 1) < DEVIATION * DEVIATION;\n}\n/**\n * 点是否在线段上\n * @param point1\n * @param point2\n * @param targetPoint\n * @returns {boolean}\n */\n\n\nfunction checkPointOnRayLine(point1, point2, targetPoint) {\n  if (checkPointOnStraightLine(point1, point2, targetPoint)) {\n    if (point1.x === point2.x) {\n      if (point1.y < point2.y) {\n        return point1.y - targetPoint.y < DEVIATION;\n      } else {\n        return targetPoint.y - point1.y < DEVIATION;\n      }\n    }\n\n    if (point1.x < point2.x) {\n      return point1.x - targetPoint.x < DEVIATION;\n    } else {\n      return targetPoint.x - point1.x < DEVIATION;\n    }\n  }\n\n  return false;\n}\n/**\n * 判断点是否在线段上面\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction checkPointOnSegment(point1, point2, targetPoint) {\n  if (checkPointOnStraightLine(point1, point2, targetPoint)) {\n    if (point1.x === point2.x) {\n      return Math.abs(point1.y - targetPoint.y) + Math.abs(point2.y - targetPoint.y) - Math.abs(point1.y - point2.y) < DEVIATION * 2;\n    }\n\n    return Math.abs(point1.x - targetPoint.x) + Math.abs(point2.x - targetPoint.x) - Math.abs(point1.x - point2.x) < DEVIATION * 2;\n  }\n\n  return false;\n}\n/**\n * 点是否在圆内\n * @param circleCenterPoint\n * @param radius\n * @param targetPoint\n * @returns {boolean}\n */\n\n\nfunction checkPointInCircle(circleCenterPoint, radius, targetPoint) {\n  if (!targetPoint) {\n    return false;\n  }\n\n  var difX = targetPoint.x - circleCenterPoint.x;\n  var difY = targetPoint.y - circleCenterPoint.y;\n  return !(difX * difX + difY * difY > radius * radius);\n}\n/**\n * 点是否在圆上\n * @param circleCenterPoint\n * @param radius\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointOnCircle(circleCenterPoint, radius, targetPoint) {\n  if (!targetPoint) {\n    return false;\n  }\n\n  return Math.abs(getDistance(targetPoint, circleCenterPoint) - radius) < DEVIATION;\n}\n/**\n * 检查点是否在圆弧上\n * @param circleCenterPoint\n * @param radius\n * @param startAngle\n * @param endAngle\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointOnArc(circleCenterPoint, radius, startAngle, endAngle, targetPoint) {\n  if (checkPointOnCircle(circleCenterPoint, radius, targetPoint)) {\n    var startPointX = radius * Math.cos(startAngle) + circleCenterPoint.x;\n    var startPointY = radius * Math.sin(startAngle) + circleCenterPoint.y;\n    var endPointX = radius * Math.cos(endAngle) + circleCenterPoint.x;\n    var endPointY = radius * Math.sin(endAngle) + circleCenterPoint.y;\n    return targetPoint.x <= Math.max(startPointX, endPointX) + DEVIATION && targetPoint.x >= Math.min(startPointX, endPointX) - DEVIATION && targetPoint.y <= Math.max(startPointY, endPointY) + DEVIATION && targetPoint.y >= Math.min(startPointY, endPointY) - DEVIATION;\n  }\n}\n/**\n * 检查点是否在三角形内部\n * @param trianglePoints\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInTriangle(trianglePoints, targetPoint) {\n  var square = getTriangleSquare(trianglePoints[0], trianglePoints[1], trianglePoints[2]);\n  var compareSquare = getTriangleSquare(trianglePoints[0], trianglePoints[1], targetPoint) + getTriangleSquare(trianglePoints[0], trianglePoints[2], targetPoint) + getTriangleSquare(trianglePoints[1], trianglePoints[2], targetPoint);\n  return Math.abs(square - compareSquare) < DEVIATION;\n}\n/**\n * 检查点是否在三角形菱形内部\n * @param centerPoint\n * @param width\n * @param height\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInDiamond(centerPoint, width, height, targetPoint) {\n  var xDis = Math.abs(centerPoint.x - targetPoint.x);\n  var yDis = Math.abs(centerPoint.y - targetPoint.y);\n  return xDis * height + yDis * width < width * height / 2 + DEVIATION;\n}\n/**\n * 检查点是否在矩形内部\n * @param point1\n * @param point2\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInRect(point1, point2, targetPoint) {\n  return targetPoint.x >= point1.x && targetPoint.x <= point2.x && targetPoint.y >= point1.y && targetPoint.y <= point2.y;\n}\n/**\n * 根据两点获取一条射线\n * @param point1\n * @param point2\n * @param xyMax\n * @return {(*|{x: *, y: *})[]|*[]}\n */\n\n\nfunction getRayLine(point1, point2, xyMax) {\n  if (point1 && point2) {\n    var point;\n\n    if (point1.x === point2.x && point1.y !== point2.y) {\n      if (point1.y < point2.y) {\n        point = {\n          x: point1.x,\n          y: xyMax.y\n        };\n      } else {\n        point = {\n          x: point1.x,\n          y: 0\n        };\n      }\n    } else if (point1.x > point2.x) {\n      point = {\n        x: 0,\n        y: getLinearYFromPoints(point1, point2, {\n          x: 0,\n          y: point1.y\n        })\n      };\n    } else {\n      point = {\n        x: xyMax.x,\n        y: getLinearYFromPoints(point1, point2, {\n          x: xyMax.x,\n          y: point1.y\n        })\n      };\n    }\n\n    return [point1, point];\n  }\n\n  return [];\n}\n/**\n * 获取平行线\n * @param points\n * @param xyMax\n * @param extendParallelLineCount\n * @returns {Array}\n */\n\n\nfunction getParallelLines(points, xyMax) {\n  var extendParallelLineCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var lines = [];\n\n  if (points.length > 1) {\n    if (points[0].x === points[1].x) {\n      var startY = 0;\n      var endY = xyMax.y;\n      lines.push([{\n        x: points[0].x,\n        y: startY\n      }, {\n        x: points[0].x,\n        y: endY\n      }]);\n\n      if (points.length > 2) {\n        lines.push([{\n          x: points[2].x,\n          y: startY\n        }, {\n          x: points[2].x,\n          y: endY\n        }]);\n        var distance = points[0].x - points[2].x;\n\n        for (var i = 0; i < extendParallelLineCount; i++) {\n          var d = distance * (i + 1);\n          lines.push([{\n            x: points[0].x + d,\n            y: startY\n          }, {\n            x: points[0].x + d,\n            y: endY\n          }]);\n        }\n      }\n    } else {\n      var startX = 0;\n      var endX = xyMax.x;\n      var kb = getLinearSlopeIntercept(points[0], points[1]);\n      var k = kb.k;\n      var b = kb.b;\n      lines.push([{\n        x: startX,\n        y: startX * k + b\n      }, {\n        x: endX,\n        y: endX * k + b\n      }]);\n\n      if (points.length > 2) {\n        var b1 = points[2].y - k * points[2].x;\n        lines.push([{\n          x: startX,\n          y: startX * k + b1\n        }, {\n          x: endX,\n          y: endX * k + b1\n        }]);\n\n        var _distance = b - b1;\n\n        for (var _i = 0; _i < extendParallelLineCount; _i++) {\n          var b2 = b + _distance * (_i + 1);\n          lines.push([{\n            x: startX,\n            y: startX * k + b2\n          }, {\n            x: endX,\n            y: endX * k + b2\n          }]);\n        }\n      }\n    }\n  }\n\n  return lines;\n}","map":{"version":3,"sources":["/home/riddle/uchart/KLineChartSample/react-sample/node_modules/klinecharts/lib/mark/graphicHelper.js"],"names":["Object","defineProperty","exports","value","getDistance","getTriangleSquare","getRotatePoint","getLinearSlopeIntercept","getLinearYFromPoints","getLinearYFromSlopeIntercept","checkPointOnStraightLine","checkPointOnRayLine","checkPointOnSegment","checkPointInCircle","checkPointOnCircle","checkPointOnArc","checkPointInTriangle","checkPointInDiamond","checkPointInRect","getRayLine","getParallelLines","DEVIATION","point1","point2","xDif","x","yDif","y","Math","sqrt","point3","x1","abs","y1","x2","y2","point","targetPoint","angle","cos","sin","difX","k","b","kb","circleCenterPoint","radius","difY","startAngle","endAngle","startPointX","startPointY","endPointX","endPointY","max","min","trianglePoints","square","compareSquare","centerPoint","width","height","xDis","yDis","xyMax","points","extendParallelLineCount","arguments","length","undefined","lines","startY","endY","push","distance","i","d","startX","endX","b1","_distance","_i","b2"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDistance = getDistance;\nexports.getTriangleSquare = getTriangleSquare;\nexports.getRotatePoint = getRotatePoint;\nexports.getLinearSlopeIntercept = getLinearSlopeIntercept;\nexports.getLinearYFromPoints = getLinearYFromPoints;\nexports.getLinearYFromSlopeIntercept = getLinearYFromSlopeIntercept;\nexports.checkPointOnStraightLine = checkPointOnStraightLine;\nexports.checkPointOnRayLine = checkPointOnRayLine;\nexports.checkPointOnSegment = checkPointOnSegment;\nexports.checkPointInCircle = checkPointInCircle;\nexports.checkPointOnCircle = checkPointOnCircle;\nexports.checkPointOnArc = checkPointOnArc;\nexports.checkPointInTriangle = checkPointInTriangle;\nexports.checkPointInDiamond = checkPointInDiamond;\nexports.checkPointInRect = checkPointInRect;\nexports.getRayLine = getRayLine;\nexports.getParallelLines = getParallelLines;\nexports.DEVIATION = void 0;\n\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DEVIATION = 2;\n/**\n * 获取两点之间的距离\n * @param point1\n * @param point2\n * @return {number}\n */\n\nexports.DEVIATION = DEVIATION;\n\nfunction getDistance(point1, point2) {\n  var xDif = point1.x - point2.x;\n  var yDif = point1.y - point2.y;\n  return Math.sqrt(xDif * xDif + yDif * yDif);\n}\n/**\n * 根据三角形三个点获取三角形面积\n * @param point1\n * @param point2\n * @param point3\n * @return {number}\n */\n\n\nfunction getTriangleSquare(point1, point2, point3) {\n  var x1 = Math.abs(point2.x - point1.x);\n  var y1 = Math.abs(point2.y - point1.y);\n  var x2 = Math.abs(point3.x - point1.x);\n  var y2 = Math.abs(point3.y - point1.y);\n  return Math.abs(x1 * y2 - x2 * y1) / 2;\n}\n/**\n * 获取一点绕另一点旋转一定角度后新的点坐标\n * @param point 旋转点\n * @param targetPoint 参照点\n * @param angle 角度\n * @return {{x: *, y: *}}\n */\n\n\nfunction getRotatePoint(point, targetPoint, angle) {\n  var x = (point.x - targetPoint.x) * Math.cos(angle) - (point.y - targetPoint.y) * Math.sin(angle) + targetPoint.x;\n  var y = (point.x - targetPoint.x) * Math.sin(angle) + (point.y - targetPoint.y) * Math.cos(angle) + targetPoint.y;\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * 获取一次函数斜率和截距，即 y = kx + b 中的k值和b值\n * @param point1\n * @param point2\n */\n\n\nfunction getLinearSlopeIntercept(point1, point2) {\n  var difX = point1.x - point2.x;\n\n  if (difX !== 0) {\n    var k = (point1.y - point2.y) / difX;\n    var b = point1.y - k * point1.x;\n    return {\n      k: k,\n      b: b\n    };\n  }\n}\n/**\n * 获取点在两点决定的一次函数上的y值\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction getLinearYFromPoints(point1, point2, targetPoint) {\n  var kb = getLinearSlopeIntercept(point1, point2);\n  return getLinearYFromSlopeIntercept(kb, targetPoint);\n}\n/**\n * 获取点在斜率和截距确定的线上的y值\n * @param kb\n * @param targetPoint\n */\n\n\nfunction getLinearYFromSlopeIntercept(kb, targetPoint) {\n  if (kb) {\n    return targetPoint.x * kb.k + kb.b;\n  }\n\n  return targetPoint.y;\n}\n/**\n * 点是否在线上\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction checkPointOnStraightLine(point1, point2, targetPoint) {\n  if (!targetPoint || !point1 || !point2) {\n    return false;\n  }\n\n  if (point1.x === point2.x) {\n    return Math.abs(targetPoint.x - point1.x) < DEVIATION;\n  }\n\n  var kb = getLinearSlopeIntercept(point1, point2);\n  var y = getLinearYFromSlopeIntercept(kb, targetPoint);\n  var yDif = Math.abs(y - targetPoint.y);\n  return yDif * yDif / (kb.k * kb.k + 1) < DEVIATION * DEVIATION;\n}\n/**\n * 点是否在线段上\n * @param point1\n * @param point2\n * @param targetPoint\n * @returns {boolean}\n */\n\n\nfunction checkPointOnRayLine(point1, point2, targetPoint) {\n  if (checkPointOnStraightLine(point1, point2, targetPoint)) {\n    if (point1.x === point2.x) {\n      if (point1.y < point2.y) {\n        return point1.y - targetPoint.y < DEVIATION;\n      } else {\n        return targetPoint.y - point1.y < DEVIATION;\n      }\n    }\n\n    if (point1.x < point2.x) {\n      return point1.x - targetPoint.x < DEVIATION;\n    } else {\n      return targetPoint.x - point1.x < DEVIATION;\n    }\n  }\n\n  return false;\n}\n/**\n * 判断点是否在线段上面\n * @param point1\n * @param point2\n * @param targetPoint\n */\n\n\nfunction checkPointOnSegment(point1, point2, targetPoint) {\n  if (checkPointOnStraightLine(point1, point2, targetPoint)) {\n    if (point1.x === point2.x) {\n      return Math.abs(point1.y - targetPoint.y) + Math.abs(point2.y - targetPoint.y) - Math.abs(point1.y - point2.y) < DEVIATION * 2;\n    }\n\n    return Math.abs(point1.x - targetPoint.x) + Math.abs(point2.x - targetPoint.x) - Math.abs(point1.x - point2.x) < DEVIATION * 2;\n  }\n\n  return false;\n}\n/**\n * 点是否在圆内\n * @param circleCenterPoint\n * @param radius\n * @param targetPoint\n * @returns {boolean}\n */\n\n\nfunction checkPointInCircle(circleCenterPoint, radius, targetPoint) {\n  if (!targetPoint) {\n    return false;\n  }\n\n  var difX = targetPoint.x - circleCenterPoint.x;\n  var difY = targetPoint.y - circleCenterPoint.y;\n  return !(difX * difX + difY * difY > radius * radius);\n}\n/**\n * 点是否在圆上\n * @param circleCenterPoint\n * @param radius\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointOnCircle(circleCenterPoint, radius, targetPoint) {\n  if (!targetPoint) {\n    return false;\n  }\n\n  return Math.abs(getDistance(targetPoint, circleCenterPoint) - radius) < DEVIATION;\n}\n/**\n * 检查点是否在圆弧上\n * @param circleCenterPoint\n * @param radius\n * @param startAngle\n * @param endAngle\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointOnArc(circleCenterPoint, radius, startAngle, endAngle, targetPoint) {\n  if (checkPointOnCircle(circleCenterPoint, radius, targetPoint)) {\n    var startPointX = radius * Math.cos(startAngle) + circleCenterPoint.x;\n    var startPointY = radius * Math.sin(startAngle) + circleCenterPoint.y;\n    var endPointX = radius * Math.cos(endAngle) + circleCenterPoint.x;\n    var endPointY = radius * Math.sin(endAngle) + circleCenterPoint.y;\n    return targetPoint.x <= Math.max(startPointX, endPointX) + DEVIATION && targetPoint.x >= Math.min(startPointX, endPointX) - DEVIATION && targetPoint.y <= Math.max(startPointY, endPointY) + DEVIATION && targetPoint.y >= Math.min(startPointY, endPointY) - DEVIATION;\n  }\n}\n/**\n * 检查点是否在三角形内部\n * @param trianglePoints\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInTriangle(trianglePoints, targetPoint) {\n  var square = getTriangleSquare(trianglePoints[0], trianglePoints[1], trianglePoints[2]);\n  var compareSquare = getTriangleSquare(trianglePoints[0], trianglePoints[1], targetPoint) + getTriangleSquare(trianglePoints[0], trianglePoints[2], targetPoint) + getTriangleSquare(trianglePoints[1], trianglePoints[2], targetPoint);\n  return Math.abs(square - compareSquare) < DEVIATION;\n}\n/**\n * 检查点是否在三角形菱形内部\n * @param centerPoint\n * @param width\n * @param height\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInDiamond(centerPoint, width, height, targetPoint) {\n  var xDis = Math.abs(centerPoint.x - targetPoint.x);\n  var yDis = Math.abs(centerPoint.y - targetPoint.y);\n  return xDis * height + yDis * width < width * height / 2 + DEVIATION;\n}\n/**\n * 检查点是否在矩形内部\n * @param point1\n * @param point2\n * @param targetPoint\n * @return {boolean}\n */\n\n\nfunction checkPointInRect(point1, point2, targetPoint) {\n  return targetPoint.x >= point1.x && targetPoint.x <= point2.x && targetPoint.y >= point1.y && targetPoint.y <= point2.y;\n}\n/**\n * 根据两点获取一条射线\n * @param point1\n * @param point2\n * @param xyMax\n * @return {(*|{x: *, y: *})[]|*[]}\n */\n\n\nfunction getRayLine(point1, point2, xyMax) {\n  if (point1 && point2) {\n    var point;\n\n    if (point1.x === point2.x && point1.y !== point2.y) {\n      if (point1.y < point2.y) {\n        point = {\n          x: point1.x,\n          y: xyMax.y\n        };\n      } else {\n        point = {\n          x: point1.x,\n          y: 0\n        };\n      }\n    } else if (point1.x > point2.x) {\n      point = {\n        x: 0,\n        y: getLinearYFromPoints(point1, point2, {\n          x: 0,\n          y: point1.y\n        })\n      };\n    } else {\n      point = {\n        x: xyMax.x,\n        y: getLinearYFromPoints(point1, point2, {\n          x: xyMax.x,\n          y: point1.y\n        })\n      };\n    }\n\n    return [point1, point];\n  }\n\n  return [];\n}\n/**\n * 获取平行线\n * @param points\n * @param xyMax\n * @param extendParallelLineCount\n * @returns {Array}\n */\n\n\nfunction getParallelLines(points, xyMax) {\n  var extendParallelLineCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var lines = [];\n\n  if (points.length > 1) {\n    if (points[0].x === points[1].x) {\n      var startY = 0;\n      var endY = xyMax.y;\n      lines.push([{\n        x: points[0].x,\n        y: startY\n      }, {\n        x: points[0].x,\n        y: endY\n      }]);\n\n      if (points.length > 2) {\n        lines.push([{\n          x: points[2].x,\n          y: startY\n        }, {\n          x: points[2].x,\n          y: endY\n        }]);\n        var distance = points[0].x - points[2].x;\n\n        for (var i = 0; i < extendParallelLineCount; i++) {\n          var d = distance * (i + 1);\n          lines.push([{\n            x: points[0].x + d,\n            y: startY\n          }, {\n            x: points[0].x + d,\n            y: endY\n          }]);\n        }\n      }\n    } else {\n      var startX = 0;\n      var endX = xyMax.x;\n      var kb = getLinearSlopeIntercept(points[0], points[1]);\n      var k = kb.k;\n      var b = kb.b;\n      lines.push([{\n        x: startX,\n        y: startX * k + b\n      }, {\n        x: endX,\n        y: endX * k + b\n      }]);\n\n      if (points.length > 2) {\n        var b1 = points[2].y - k * points[2].x;\n        lines.push([{\n          x: startX,\n          y: startX * k + b1\n        }, {\n          x: endX,\n          y: endX * k + b1\n        }]);\n\n        var _distance = b - b1;\n\n        for (var _i = 0; _i < extendParallelLineCount; _i++) {\n          var b2 = b + _distance * (_i + 1);\n          lines.push([{\n            x: startX,\n            y: startX * k + b2\n          }, {\n            x: endX,\n            y: endX * k + b2\n          }]);\n        }\n      }\n    }\n  }\n\n  return lines;\n}"]},"metadata":{},"sourceType":"script"}